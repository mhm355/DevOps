#!/bin/bash
#
# SCRIPT: install-k8s-control-plane-v1.34.1.sh
#
# This script installs a Kubernetes v1.34.1 control-plane node using kubeadm
# on a Debian-based distribution (e.g., Ubuntu).
#
# It must be run with sudo privileges.
# e.g., sudo bash ./install-k8s-control-plane-v1.34.1.sh

# For Worker Node Run Steps 1-4 then sudo kubeadm join <control-plane-ip>:6443 --token <your-token> --discovery-token-ca-cert-hash sha256:<your-hash>"
#

set -eo pipefail

# --- Configuration ---
K8S_VERSION="1.34.1"
# Use a wildcard to get the latest package revision for 1.34.1 (e.g., 1.34.1-1.1)
K8S_PACKAGE_VERSION="1.34.1-*"
# Calico CNI manifest URL. v3.31 is compatible with K8s v1.34.
CALICO_MANIFEST_URL="https://raw.githubusercontent.com/projectcalico/calico/v3.31.0/manifests/calico.yaml"
# Pod network CIDR, must match the CNI's default.
POD_NETWORK_CIDR="192.168.0.0/16"

echo "--- [Step 1/7] Starting Kubernetes v${K8S_VERSION} Control-Plane Install ---"

# --- [Step 2/7] System Prerequisites ---
echo "--- [Step 2/7] Preparing System (disabling swap, loading kernel modules) ---"

# Disable swap permanently
swapoff -a
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# Load required kernel modules for container networking
cat <<EOF | tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

# Set sysctl params required by Kubernetes
cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sysctl --system > /dev/null 2>&1

# --- [Step 3/7] Install containerd runtime ---
echo "--- [Step 3/7] Installing 'containerd' container runtime ---"
apt-get update > /dev/null 2>&1
apt-get install -y containerd

# Create default containerd configuration and enable SystemdCgroup
echo "Configuring containerd to use 'SystemdCgroup'..."
mkdir -p /etc/containerd
containerd config default | tee /etc/containerd/config.toml > /dev/null 2>&1
sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

# Restart containerd to apply changes
systemctl restart containerd

# --- [Step 4/7] Install Kubernetes Packages (kubeadm, kubelet, kubectl) ---
echo "--- [Step 4/7] Installing kubeadm, kubelet, and kubectl v${K8S_VERSION} ---"

# Install dependencies for adding apt repositories
apt-get install -y apt-transport-https ca-certificates curl gpg

# Add Google Cloud public signing key
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Add Kubernetes v1.34 apt repository
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list > /dev/null 2>&1

# Update package list and install specific versions
apt-get update > /dev/null 2>&1
echo "Installing package version: ${K8S_PACKAGE_VERSION}"
apt-get install -y kubelet=${K8S_PACKAGE_VERSION} kubeadm=${K8S_PACKAGE_VERSION} kubectl=${K8S_PACKAGE_VERSION}

# Hold packages to prevent accidental automatic upgrades
apt-mark hold kubelet kubeadm kubectl

# --- [Step 5/7] Initialize Control-Plane Node ---
echo "--- [Step 5/7] Initializing cluster with kubeadm ---"

kubeadm init \
  --kubernetes-version v${K8S_VERSION} \
  --pod-network-cidr=${POD_NETWORK_CIDR}

# --- [Step 6/7] Configure kubectl for user ---
echo "--- [Step 6/7] Configuring kubectl for 'root' and '$SUDO_USER' ---"

# Configure for root user (to run the next step)
mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

# Configure for the user who ran the script with sudo
if [ -n "$SUDO_USER" ]; then
    USER_HOME=$(getent passwd "$SUDO_USER" | cut -d: -f6)
    mkdir -p "$USER_HOME"/.kube
    cp -i /etc/kubernetes/admin.conf "$USER_HOME"/.kube/config
    chown "$SUDO_USER":"$SUDO_USER" "$USER_HOME"/.kube/config
fi

# --- [Step 7/7] Install Calico CNI Plugin ---
echo "--- [Step 7/7] Installing Calico CNI (v3.31.0) network plugin ---"

# Apply the CNI manifest
kubectl apply -f ${CALICO_MANIFEST_URL}

echo ""
echo "--- âœ… Installation Complete ---"
echo "Your Kubernetes v${K8S_VERSION} control-plane is ready."
echo "The 'kubeadm join' command for your worker nodes was printed above."
echo ""
echo "To check cluster status, run:"
echo "  kubectl get nodes"
echo "  kubectl get pods -A"
echo ""


